#!/bin/bash
# Script for lemonbar on herbstluftwm
# Updates using herbstclient rather than looping to make it more efficient. Can be manually refreshed on demand by sending signal 10 (pkill -10 herbbar), or by using herbstluftwm emit hooks: `herbstclient emit_hook UPDATE_PANEL`

trap 'update' 10   # allows user to instantaneously update the bar

# Check for an argument indicating dual monitors, this is to prevent multiple bars writing to the same named pipe
if [ -z "$1" ]; then
	lockf="${XDG_RUNTIME_DIR}/herbbar.lock"
	fifo=${XDG_RUNTIME_DIR:-/tmp}/herb-bar.fifo
	test -e "$fifo" && rm "$fifo"
	mkfifo "$fifo"
	monitor=0
else
	lockf="${XDG_RUNTIME_DIR}/herbbar1.lock"
	fifo=${XDG_RUNTIME_DIR:-/tmp}/herb-bar2.fifo
	test -e "$fifo" && rm "$fifo"
	mkfifo "$fifo"
	monitor=1
fi

# pidfile
set -C
! echo "$$" > "$lockf" && exit 1

trap "pkill lemonbar; kill $(jobs -p); rm -r $fifo; rm -r $lockf" EXIT # Cleanly exit

fgb='%{F#8f8678}'
fgn='%{F-}'
fga='%{F#839773}'
bgf='%{B#c8c2bf}'

# Date
check_date() {
	while :; do
		echo "DAT$(date "+%a, %b %d  ${fgb}${fgn}  %I:%M %p")" > "$fifo"
		sleep 30
	done &
}
# Network
check_net() {
	while :; do
		netp=""
    	con_up="$(nmcli --terse --fields NAME,TYPE,DEVICE con show --active | grep -v 'virbr0')"
            if [[ "$con_up" =~ .*ethernet.* ]]; then
                net="$(echo "$con_up" | grep 'ethernet' | awk -F: '{print $1}')"
                netp=""
			fi
            if [[ "$con_up" =~ .*wireless.* ]]; then
                net="$(echo "$con_up" | grep 'wireless' | awk -F: '{print $1}')"
                netp="${netp} "
			fi
            if [[ ! "$con_up" =~ .*ethernet.* && ! "$con_up" =~ .*wireless.* ]]; then
                net="Airplane mode"
                netp=""
            fi

            if [[ "$con_up" =~ .*tun.* || "$con_up" =~ .*vpn.* ]]; then
                echo "VPN${fga}" > "$fifo"
            else
                echo "VPN  " > "$fifo"
            fi

        	echo "NET${fgb}$netp %{T3}${fgn}$net%{T2}" > "$fifo"
            sleep 60
    done &
}
# Battery
check_bat() {
	while :; do
        bat="$(cat /sys/class/power_supply/BAT0/capacity)"
        bat_state="$(upower -i /org/freedesktop/UPower/devices/battery_BAT0 | grep state | tr -d "[:space:]" | cut -c 7-)"
        if [ "$bat" -lt 20 ]; then
            bati=""
        elif [ "$bat" -ge "20" ] && [ "$bat" -lt "40" ]; then
            bati=""
        elif [ "$bat" -ge "40" ] && [ "$bat" -lt "60" ]; then
            bati=""
        elif [ "$bat" -ge "60" ] && [ "$bat" -lt "90" ]; then
            bati=""
        elif [ "$bat" -eq "100" ]; then
            bati=""
        fi
        case "$bat_state" in
            charging)
                bat="%{T3}$bat%+%{T2}"
                bati=""
                ;;
            *)
                bat="%{T3}${bat}% %{T2}"
                ;;
        esac
	    if ! pgrep -x "xautolock" >/dev/null 2>&1; then
            bat="${bat} %{T1}(caf)%{T2}"
        fi
        echo "BAT${fgb}${bati} ${fgn}$bat" > "$fifo"
        sleep 120
    done &
}
# Volume            
check_vol() {                                                 
	while :; do
      	#vol="$(pacmd list-sinks | grep -A 15 '* index'| awk '/volume: front/{ print $5 }' | sed 's/%//g')"
		vol="$(pactl list sinks | grep -m 1 "Volume:" | awk '{print $5}' | sed 's/%//g')"

    	if [ "$vol" -ge "0" ] && [ "$vol" -lt "30" ]; then
			voli=""
        elif [ "$vol" -ge "30" ] && [ "$vol" -lt "60" ]; then
            voli="奔"                                  
        elif [ "$vol" -ge "60" ] && [ "$vol" -lt "90" ]; then
            voli="墳"         
        elif [ "$vol" -ge "90" ] && [ "$vol" -le "100" ]; then
            voli="墳"
        else
            voli="墳"
        fi

        echo "VOL${fgb}$voli %{T3}${fgn}${vol}%%%{T2}" > "$fifo"
        sleep 60
   done &
}
# Cmus                           
check_mus() {
    # no while loop, refresh the bar with pkill whenever you launch cmus
	if pgrep -x "cmus" >/dev/null 2>&1; then
		title="$(cmus-remote -Q | grep "tag title " | sed "s/tag title //")"
		#album="$(cmus-remote -Q | grep "tag album " | sed "s/tag album //")"
		artist="$(cmus-remote -Q | grep "tag artist " | sed "s/tag artist //")"
		echo "MUS${fgb} ${fgn}%{T3}$title %{T-}${fgb}by%{T2} ${fga}%{T3}$artist%{T2}" > $fifo &
	else
		echo "MUS" > $fifo &
	fi
}
check_tag() {
	if [ "$monitor" == "0" ]; then
		tags_list=( $(herbstclient tag_status 0) )
	else
		tags_list=( $(herbstclient tag_status 1) )
	fi
	tags=""
	for t in "${tags_list[@]}"; do
		case $t in
            '.'11|'.'12|'.'13|'.'14|':'11|':'12|':'13|':'14)
                tags="$tags" ;;
            '#'*)
			    tags="${tags}$bgf%{U#60584f}%{+u} ${t#?} %{B-}%{-u}" ;;
            '+'*)
			    tags="${tags}%{U#60584f}%{+u} ${t#?} %{B-}%{-u}" ;;
            ':'*|'-'*|'%'*)
			    tags="${tags} ${t#?} " ;;
        esac
	done
	echo "DES$tags" > $fifo &
}
check_todo() {
	while :; do
		todo="$(todo.sh | head -n -2 | wc -l)"
		if [ "$todo" -gt 0 ]; then
			echo "TOD${fgb}${fgn} %{T3}$todo%{T2}" > $fifo
		else
			echo "TOD${fga}陼 0 tasks${fgn}" > $fifo
		fi
		sleep 20
	done &
}
check_hide() {
    number=$(herbstclient attr my_minimized_windows)
    echo "MIN$number" > $fifo &
}

check_wm() {
	while read -r line; do
		case $line in
			tag_changed*)
				check_tag ;;
			tag_flags)
				check_tag
				check_mus ;;
			UPDATE_HIDDEN)
                check_hide ;;
			UPDATE_PANEL)
				update ;;
		esac
	done < <(herbstclient -i) &
}

parse_fifo() {
	while read -r line; do
		case $line in
			DAT*)
				date="${line#???}" ;;
			DES*)
				desktop="${line#???}" ;;
			NET*)
				network="${line#???}" ;;
			VPN*)
				vpnname="${line#???}" ;;
			VOL*)
				volume="${line#???}" ;;
			BAT*)
				battery="${line#???}" ;;
			MUS*)
				music="${line#???}" ;;
			TOD*)
				todo="${line#???}" ;;
            MIN*)
                hidden="${line#???}" ;;
			UPD*)
				update ;;
			*) ;;
		esac
		#echo "%{T-}%{l}%{O1}%{A:eww close side-light || eww open side-light:}%{A3:eww close side-light || eww open side-light:}${desktop}%{T2}  %{B-}%{O20}${music}%{A}%{A} %{c}%{T3}%{A:eww close calendar-light || eww open calendar-light:}%{A3:eww close calendar-light || eww open calendar-light:}${fgn}${date}%{A}%{A}%{T-} %{r}%{A:eww close utilities-light || eww open utilities-light:}%{A3:eww close utilities-light || eww open utilities-light:}${volume}   ${network} ${vpnname}   ${battery}   ${todo} %{A}%{A} "
		echo "%{T-}%{l}%{O1}%{A:eww close side-light || eww open side-light:}%{A3:eww close side-light || eww open side-light:}${desktop}%{T2}  %{B-}%{O20}${music}%{A}%{A} %{c}%{T3}%{A:eww close calendar-light || eww open calendar-light:}%{A3:eww close calendar-light || eww open calendar-light:}${fgn}${date}%{A}%{A}%{T-} %{r}%{A:eww close utilities-light || eww open utilities-light:}%{A3:eww close utilities-light || eww open utilities-light:}${volume}   ${network} ${vpnname}   ${battery}   "
    done < <(tail -f "$fifo")
}

update() {
	check_tag
	check_wm
	check_date
	check_net
	check_bat
	check_vol
	check_mus
	#check_todo
    check_lock
#    check_hide
}

update
parse_fifo
