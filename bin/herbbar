#!/bin/bash
# Script for lemonbar on herbstluftwm
# Updates using herbstclient rather than looping to make it more efficient. Can be manually refreshed on demand by sending signal 10 (pkill -10 herbbar), or by using herbstluftwm emit hooks: `herbstclient emit_hook UPDATE_PANEL`

trap 'update' 10   # allows user to instantaneously update the bar

# Check for an argument indicating dual monitors, this is to prevent multiple bars writing to the same named pipe
if [ -z "$1" ]; then
	fifo=${XDG_RUNTIME_DIR:-/tmp}/herb-bar.fifo
	test -e "$fifo" && rm "$fifo"
	mkfifo "$fifo"
	monitor=0
else
	fifo=${XDG_RUNTIME_DIR:-/tmp}/herb-bar2.fifo
	test -e "$fifo" && rm "$fifo"
	mkfifo "$fifo"
	monitor=1
fi

trap "pkill lemonbar; kill $(jobs -p); rm -r $fifo" EXIT # Cleanly exit

fgb='%{F#937f74}'
fgn='%{F-}'
fga='%{F#8b8f7e}'
fga2='%{F#987a6b}'
bgf='%{B#bebebe}'

# Date
check_date() {
	while :; do
                echo "DAT$(date "+%a, %b %d  ${fgb}${fgn}  %I:%M %p")" > "$fifo"
                sleep 30
        done &
}
# Network
check_net() {
        while :; do
                con_up="$(nmcli --terse --fields NAME,TYPE,DEVICE con show --active | grep -v 'virbr0')"
                if [[ "$con_up" =~ .*ethernet.* ]]; then
                        net="$(echo "$con_up" | grep 'ethernet' | awk -F: '{print $1}')"
                        netp=" Eth"
                elif [[ "$con_up" =~ .*wireless.* ]]; then
                        net="$(echo "$con_up" | grep 'wireless' | awk -F: '{print $1}')"
                        netp=" Wlp"
                elif [[ ! "$con_up" =~ .*ethernet.* && ! "$con_up" =~ .*wireless.* ]]; then
                        net="Airplane mode"
                        netp=""
                fi

                if [[ "$con_up" =~ .*tun.* || "$con_up" =~ .*vpn.* ]]; then
                        echo "VPN${fga}(vpn)" > "$fifo"
                else
                        echo "VPN  " > "$fifo"
                fi

                echo "NET${fgb}$netp ~ ${fgn}$net" > "$fifo"
                sleep 60
        done &
}
# Battery
check_bat() {
        while :; do
                bat="$(cat /sys/class/power_supply/BAT0/capacity)"
                bat_state="$(upower -i /org/freedesktop/UPower/devices/battery_BAT0 | grep state | tr -d "[:space:]" | cut -c 7-)"
                if [ "$bat" -lt 20 ]; then
                        bati=""
                elif [ "$bat" -ge "20" ] && [ "$bat" -lt "30" ]; then
                        bati=""
                elif [ "$bat" -ge "30" ] && [ "$bat" -lt "50" ]; then
                        bati=""
                elif [ "$bat" -ge "50" ] && [ "$bat" -lt "90" ]; then
                        bati=""
                elif [ "$bat" -eq "100" ]; then
                        bati=""
                fi
                case "$bat_state" in
                        charging)
                                bat="$bat% ${fga}(charging)${fgn}"
                                bati=""
                                ;;
                        *)
                                bat="${bat}%"
                                ;;
                esac
                echo "BAT${fgb}${bati} ~ ${fgn}$bat" > "$fifo"
                sleep 120
        done &
}
# Volume            
check_vol() {                                                 
        while :; do      
                vol="$(pacmd list-sinks|grep -A 15 '* index'| awk '/volume: front/{ print $5 }' | sed 's/%//g')"

                if [ "$vol" -ge "0" ] && [ "$vol" -lt "30" ]; then
                        voli=""
                elif [ "$vol" -ge "30" ] && [ "$vol" -lt "60" ]; then
                        voli="奔"                                  
                elif [ "$vol" -ge "60" ] && [ "$vol" -lt "90" ]; then
                        voli="墳"         
                elif [ "$vol" -ge "90" ] && [ "$vol" -le "100" ]; then
                        voli="墳"
                else
                        voli="墳"
                fi
                echo "VOL${fgb}$voli ~ ${fgn}${vol}%" > "$fifo"
                sleep 60
        done &
}
# Cmus                           
check_mus() {
    # no while loop, refresh the bar with pkill whenever you launch cmus
	if pgrep -x "cmus" >/dev/null 2>&1; then
			title="$(cmus-remote -Q | grep "tag title " | sed "s/tag title //")"
			album="$(cmus-remote -Q | grep "tag album " | sed "s/tag album //")"
			artist="$(cmus-remote -Q | grep "tag artist " | sed "s/tag artist //")"
			echo "MUS${fgb} ~ ${fgn}$title ${fgb}by ${fga}$artist" > $fifo
	fi
}
check_tag() {
	if [ "$monitor" == "0" ]; then
		tags_list=( $(herbstclient tag_status 0) )
	else
		tags_list=( $(herbstclient tag_status 1) )
	fi
	tags=""
	for t in "${tags_list[@]}"; do
		if [[ "$t" == \#*  ]]; then
			tags="${tags}$bgf%{U#60584f}%{+u} ${t#?} %{B-}%{-u}"
		elif [[ "$t" == +* ]]; then
			tags="${tags}%{U#60584f}%{+u} ${t#?} %{B-}%{-u}"
		elif [[ "$t" == :* || "$t" == -* || "$t" == %* ]]; then
			tags="${tags} ${t#?} "
		fi
	done
	echo "DES$tags" > $fifo
}
check_todo() {
	while :; do
		todo="$(todo.sh | head -n -2 | wc -l)"
		if [ "$todo" > 0 ]; then
			echo "TOD${fgb}${fgn} $todo ${fga}todo${fgn}" > $fifo
		else
			echo "TOD${fga}陼${fgn}" > $fifo
		fi
		sleep 20
	done &
}

check_wm() {
	while read -r line; do
		case $line in
			tag_changed*)
				check_tag ;;
			tag_flags)
				check_tag ;;
			focus_changed*)
				#check_hidden ;;
				;;
			window_title_changed*cmus*)
				check_mus ;;
			window_title_changed*-*-*)
				check_mus ;;
			UPDATE_PANEL)
				update ;;
		esac
	done < <(herbstclient -i) &
}

parse_fifo() {
	while read -r line; do
		case $line in
			DAT*)
				date="${line#???}" ;;
			DES*)
				desktop="${line#???}" ;;
			NET*)
				network="${line#???}" ;;
			VPN*)
				vpnname="${line#???}" ;;
			VOL*)
				volume="${line#???}" ;;
			BAT*)
				battery="${line#???}" ;;
			MUS*)
				music="${line#???}" ;;
			TOD*)
				todo="${line#???}" ;;
			UPD*)
				update ;;
			*) ;;
		esac
		echo "%{l}%{O1}$desktop  %{B-}%{O20}${music} %{c}${fgn}${date} %{r}${volume}   ${network} ${vpnname}   ${battery}  %{A:eww open todo:}%{A3:eww close todo:} ${todo} %{A}%{A}"
    done < <(tail -f "$fifo")
}

update() {
	check_wm
	check_date
	check_net
	check_bat
	check_vol
	check_mus
	check_todo
}

update
parse_fifo
