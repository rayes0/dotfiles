#!/usr/bin/bash
# My herbstluftwm configuration

# ======== Basic Things ======== #
~/.fehbg &

# Make so that everything is only piped to one instance of herbstclient
IFS=$'\n'
cmds=(herbstclient chain )
hc() {
	cmds+=(:-: "$@" )
}

#xrdb ~/.lightXresources
xrdb ~/.bitmapXresources
hc keyunbind --all  # remove all existing keybindings
#hc set tree_style '╾│ ├└╼─┐'
mod=Mod4   # super key
alt=Mod1  # alt key
hc unlock  # just in case we ran with --locked

xrandr --listmonitors | grep "HDMI-0" && xrandr --output DP-2 --off
hc detect_monitors # detect monitors


# ======== Window Keybindings ======== #
### Basic binds
hc keybind $mod-q reload
hc keybind $mod-x close_and_remove
hc keybind $mod-Shift-x close
#hc keybind $mod-Return spawn "urxvtc"
hc keybind $mod-Return spawn sh -c "emacsclient -ce '(shx)'"
hc keybind $mod-Shift-Return spawn urxvtc -name URxvtFloat

### Focusing
hc set focus_crosses_monitor_boundaries 1
hc set swap_monitors_to_get_tag 1
hc keybind $mod-h           focus left
hc keybind $mod-j           focus down
hc keybind $mod-k           focus up
hc keybind $mod-l           focus right
hc keybind $mod-BackSpace   cycle_monitor
hc keybind $mod-Tab         cycle_all +1	
hc keybind $mod-Shift-Tab   cycle_all -1	
hc keybind $mod-r jumpto urgent

hc keybind $mod-Left  focus left
hc keybind $mod-Right focus right

### Moving
hc keybind $mod-Shift-Left  shift_edge left
hc keybind $mod-Shift-Down  shift_edge down
hc keybind $mod-Shift-Up    shift_edge up
hc keybind $mod-Shift-Right shift_edge right
hc keybind $mod-Shift-h     shift left
hc keybind $mod-Shift-j     shift down
hc keybind $mod-Shift-k     shift up
hc keybind $mod-Shift-l     shift right

hc keybind $mod-$alt-h		mirror horizontal
hc keybind $mod-$alt-l		mirror horizontal
hc keybind $mod-$alt-j		mirror vertical
hc keybind $mod-$alt-k		mirror vertical

### Frames
hc keybind $mod-u split auto
hc keybind $mod-Shift-u	 chain , set frame_border_width 2 , split bottom 0.5
hc keybind $mod-Control-u chain , set frame_border_width 2 , split right 0.5
hc keybind $mod-Control-space split explode

### Resizing
resizestep=0.02
hc keybind $mod-Control-h       resize left +$resizestep
hc keybind $mod-Control-j       resize down +$resizestep
hc keybind $mod-Control-k       resize up +$resizestep
hc keybind $mod-Control-l       resize right +$resizestep
hc keybind $mod-Control-Left    resize left +$resizestep
hc keybind $mod-Control-Down    resize down +$resizestep
hc keybind $mod-Control-Up      resize up +$resizestep
hc keybind $mod-Control-Right   resize right +$resizestep

### Layout Operations
hc keybind $mod-space attr clients.focus.floating toggle
hc keybind $mod-$alt-space floating toggle
hc keybind $mod-t pseudotile toggle
hc keybind $mod-e fullscreen toggle
hc set default_frame_layout 1 # set horizontal layout by default
# cycle layouts
hc keybind $mod-Shift-space \
   or , and . compare tags.focus.curframe_wcount = 2 \
   . cycle_layout +1 max horizontal vertical grid \
   , cycle_layout +1
# minimize and maximize
hc silent new_attr int my_minimized_counter 0
hc silent new_attr int my_minimized_windows 0
hc keybind $mod-i spawn ~/bin/hlwm/minimize.sh
hc keybind $mod-o mktemp string MINCLIENT mktemp int LASTIDATT chain \
   . set_attr LASTIDATT 0 \
   . foreach CLIENT clients. and \
   , sprintf MINATT "%c.minimized" CLIENT \
   compare MINATT "=" "true" \
   , sprintf TAGATT "%c.tag" CLIENT substitute FOCUS "tags.focus.name" \
   compare TAGATT "=" FOCUS \
   , sprintf CURRENTIDATT "%c.my_minimized_age" CLIENT and \
   : substitute LASTID LASTIDATT \
   compare CURRENTIDATT 'gt' LASTID \
   : substitute CURRENTID CURRENTIDATT \
   set_attr LASTIDATT CURRENTID \
   , set_attr MINCLIENT CLIENT \
   . and \
   , compare MINCLIENT "!=" "" \
   , substitute CLIENT MINCLIENT chain \
   : sprintf MINATT "%c.minimized" CLIENT \
   set_attr MINATT false \
   : sprintf CURRENTIDATT "%c.my_minimized_age" CLIENT \
   remove_attr CURRENTIDATT

### Mouse binds
hc mouseunbind --all
hc mousebind $mod-Button1 move
hc mousebind $mod-Button2 zoom
hc mousebind $mod-Button3 resize
hc mousebind $mod-Button4 call use_previous
hc mousebind $mod-Button5 call use_previous


# ======== Workspaces/Tags ======== #
tag_names=( {1..14} )
tag_keys=( {1..9} 0 F{1..4} )
hc rename default "${tag_names[0]}" || true
for i in "${!tag_names[@]}" ; do
  hc add "${tag_names[$i]}"
  key="${tag_keys[$i]}"
  if [ -n "$key" ] ; then
    hc keybind "$mod-$key" use_index "$i"
    hc keybind "$mod-Shift-$key" move_index "$i"
    hc keybind "$mod-Control-$key" chain , move_index "$i" , use_index "$i"
    hc keybind "$mod-$alt-$key" chain \
       , sprintf FOCNAME "%s" tags.focus.name chain \
       : set_attr tags.focus.name temp \
       : sprintf UNFNAME "%s" tags.${i}.name chain \
       + set_attr tags.$i.name FOCNAME \
       + set_attr tags.by-name.temp.name UNFNAME \
       , sprintf FOCTAG "%s" tags.focus.index \
       set_attr tags.$i.index FOCTAG \
       , set_attr tags.focus.index $i \
       , use_index $i
  fi
done

### Tag switching operations
hc keybind $mod-period use_index +1 --skip-visible
hc keybind $mod-comma  use_index -1 --skip-visible
hc keybind $mod-a use_previous

# ======== Function Keys ======== #
hc keybind XF86MonBrightnessUp spawn ~/bin/notifs/brightness.sh up
hc keybind XF86MonBrightnessDown spawn ~/bin/notifs/brightness.sh down

hc keybind XF86AudioRaiseVolume spawn sh -c "pactl set-sink-volume @DEFAULT_SINK@ +1% && ~/bin/notifs/volume.sh"
hc keybind XF86AudioLowerVolume spawn sh -c "pactl set-sink-volume @DEFAULT_SINK@ -1% && ~/bin/notifs/volume.sh"
hc keybind $mod-Up spawn sh -c "pactl set-sink-volume @DEFAULT_SINK@ +1% && ~/bin/notifs/volume.sh"
hc keybind $mod-Down spawn sh -c "pactl set-sink-volume @DEFAULT_SINK@ -1% && ~/bin/notifs/volume.sh"
hc keybind XF86AudioMute spawn sh -c "pactl set-sink-mute @DEFAULT_SINK@ toggle && ~/bin/notifs/volume.sh"

#hc keybind $mod-c spawn sh -c "if pgrep -x hhpc; then pkill hhpc; else hhpc -i 5; fi"
hc keybind $mod-c spawn sh -c "if pgrep -x xbanish; then pkill xbanish; else xbanish -i 5; fi"


# ======== Theme ======== #
hc attr theme.tiling.reset 1
hc attr theme.floating.reset 1

### Frame colors
hc set frame_border_active_color '#fccec1'
hc set frame_border_normal_color '#c8c2bf'
hc set frame_bg_normal_color '#ede6e3'
hc set frame_bg_active_color '#ede6e3'

### Frame settings
hc set frame_border_width 0
hc set always_show_frame on
hc set frame_bg_transparent on
hc set frame_transparent_width 0
hc set frame_gap 8
hc set frame_padding -2
hc set smart_frame_surroundings on

hc set snap_gap 8
hc set snap_distance 10

### Theme Keybinds
hc keybind $mod-g cycle_value frame_gap 0 8
hc keybind $mod-Shift-b cycle_value frame_border_width 2 0

### Window colors
hc attr theme.floating.padding_top 20
hc attr theme.active.color '#ce9c85'
hc attr theme.normal.color '#a09c80'
hc attr theme.urgent.color orange
hc attr theme.inner_width 0
hc attr theme.inner_color '#ede6e3'
hc attr theme.border_width 0
#hc attr theme.floating.border_width 1
hc attr theme.floating.border_width 0
hc attr theme.floating.outer_width 0
hc attr theme.floating.outer_color '#ede6e3'
hc attr theme.active.inner_color '#c8c2bf'
hc attr theme.active.outer_color '#c8c2bf'
hc attr theme.background_color '#ede6e3'

# Window Settings
hc set window_gap 2
hc set smart_window_surroundings on
hc set mouse_recenter_gap 0
hc set raise_on_focus 0
hc set update_dragged_clients 1


# ======== Application Keybindings ======== #
### Menus
#hc keybind $mod-d spawn dmenu_run -i -h 30 -nf \#6c605a -nb \#ede6e3 -sf \#6c605a -sb \#c8c2bf -shb \#c8c2bf -nhb \#ede6e3 -shf \#9c7b9c
hc keybind $mod-d spawn rofi -show run -theme launcher_light.rasi
hc keybind $mod-m spawn rofi -show drun -theme launcher_light.rasi
hc keybind $mod-w spawn rofi -no-lazy-grab -show window -theme window_menu_light.rasi
hc keybind $mod-p spawn rofi -modi "clipboard:greenclip print" -show clipboard -run-command '{cmd}' -config ~/.config/rofi/clipboard.rasi -m -4
#hc keybind $mod-Shift-w spawn sh -c 'eww close side-light || eww open side-light'
#hc keybind $mod-Shift-e spawn sh -c 'eww close calendar-light || eww open calendar-light'
hc keybind $mod-y spawn keepmenu

### Status notifs (for when barless)
hc keybind $mod-s spawn ~/bin/notifs/show-status.sh
hc keybind $mod-z spawn ~/bin/notifs/hlwm-workspace.sh

### Useful Utilities
hc keybind $mod-n spawn ~/.config/cmus/scripts/cmus-notification.sh
hc keybind $mod-Shift-q spawn ~/bin/powermenu.sh
hc keybind $mod-b spawn ~/bin/hlwm/hidebar.sh
hc keybind $mod-Shift-Delete spawn ~/bin/lock

### Applications
hc keybind $mod-Shift-t spawn flatpak run com.github.micahflee.torbrowser-launcher
hc keybind $mod-Shift-f spawn flatpak run io.gitlab.librewolf-community --ProfileManager
#hc keybind $mod-Shift-p spawn flatpak run io.gitlab.librewolf-community --P Professional
hc keybind $mod-Shift-p spawn flatpak run com.github.Eloston.UngoogledChromium

hc keybind $mod-Shift-g spawn flatpak run org.gimp.GIMP
hc keybind $mod-Shift-z spawn zrythm
hc keybind $mod-Shift-a spawn flatpak run net.ankiweb.Anki
hc keybind $mod-Shift-v spawn pavucontrol
hc keybind $mod-Shift-c spawn emacsclient -cqun
hc keybind $mod-Shift-e spawn emacsclient -cqun -F '((title . "emacs-floating"))'
hc keybind $mod-Shift-d spawn emacsclient -cqune '(dired "~")' -F '((title . "emacs-floating"))'
hc keybind $mod-Shift-o spawn osu.AppImage


# ======== Rules ======== #
hc unrule -F

### Generic rules
hc rule focus=on # normally focus new clients
hc rule floatplacement=smart
hc rule windowtype='_NET_WM_WINDOW_TYPE_SPLASH' manage=off
hc rule windowtype~'_NET_WM_WINDOW_TYPE_(DIALOG|UTILITY)' floating=on
hc rule windowtype='_NET_WM_WINDOW_TYPE_DIALOG' focus=on
hc rule windowtype~'_NET_WM_WINDOW_TYPE_(NOTIFICATION|DOCK|DESKTOP)' manage=off

### Terminal Rules
hc rule instance='URxvtTasks' floating=on
hc rule instance='URxvtFuzzy' floating=on
hc rule instance='URxvtZim' floating=on
hc rule instance='URxvtFloat' floating=on

### Application Rules
hc rule instance='gl' class='mpv' floating=on
hc rule instance='feh' floating=on
hc rule instance='lxpolkit' floating=on
hc rule instance='lxappearance' floating=on
hc rule instance="pavucontrol" floating=on
#hc rule class='Zathura' floating=on
hc rule instance='thunar' floating=on
hc rule instance='emacs' title='emacs-floating' floating=on
hc rule instance='emacs' title='Ediff' floating=on
hc rule instance='florence' floating=on

hc rule instance='octave-gui' floating=on
hc rule instance='r_x11' floating=on
hc rule instance='gnuplot_qt' floating=on

#hc rule instance='zoom' title='Chat' floating=on
#hc rule instance='zoom' title='Settings' floating=on
hc rule instance='zoom' floating=on

hc rule instance='Zrythm' class='zrythm' title='Project Progress' focus=off switchtag=off
hc rule class='Carla2-Plugin' floating=on

hc rule instance='anki' title='Statistics' floating=on

hc rule instance='nvidia-settings' floating=on


# ===== Run Commands ===== #
"${cmds[@]}" &

# ======== Autostarting Applications ======== #
pkill picom
#picom --config ~/.config/picom-rounded-herb.conf --shadow-opacity 0.25 &
picom --config ~/.config/picom-herb.conf --shadow-opacity 0.25 &
pkill dunst
dunst &
#
#### Only autostart on first run
##rulespawn() {(
##    # this rule also requires, that the client sets the _NET_WM_PID property
##    herbstclient rule once pid=$BASHPID maxage=10 "${RULES[@]}"
##    exec "$@"
##    ) &
##}
#if herbstclient silent new_attr bool my_not_first_autostart ; then
#	start-eww-pipewire &
#	herbstclient rule instance='URxvtWeechat' tag=12
#    urxvtc -name "URxvtWeechat" -e tmux new-session -A -D -s weechat "weechat" &
#	herbstclient rule instance='URxvtCalendar' tag=11
#	urxvtc -name "URxvtCalendar" -e ~/bin/tmux/time-manage.sh &
#fi
